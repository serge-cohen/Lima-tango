//=============================================================================
//
// file :         VieworksVPClass.h
//
// description :  Include for the VieworksVPClass root class.
//                This class is the singleton class for
//                the VieworksVP device class.
//                It contains all properties and methods which the 
//                VieworksVP requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _VIEWORKSVPCLASS_H
#define _VIEWORKSVPCLASS_H

#include <tango.h>
#include <VieworksVP.h>


namespace VieworksVP_ns
{//=====================================
//	Define classes for attributes
//=====================================
class sensorTemperatureAttrib: public Tango::Attr
{
public:
	sensorTemperatureAttrib():Attr("sensorTemperature", Tango::DEV_DOUBLE, Tango::READ) {};
	~sensorTemperatureAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_sensorTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_sensorTemperature_allowed(ty);}
};

class currentTemperatureAttrib: public Tango::Attr
{
public:
	currentTemperatureAttrib():Attr("currentTemperature", Tango::DEV_DOUBLE, Tango::READ) {};
	~currentTemperatureAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_currentTemperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_currentTemperature_allowed(ty);}
};

class serialNumberAttrib: public Tango::Attr
{
public:
	serialNumberAttrib():Attr("serialNumber", Tango::DEV_STRING, Tango::READ) {};
	~serialNumberAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_serialNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_serialNumber_allowed(ty);}
};

class fPGAVersionAttrib: public Tango::Attr
{
public:
	fPGAVersionAttrib():Attr("fPGAVersion", Tango::DEV_STRING, Tango::READ) {};
	~fPGAVersionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_fPGAVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_fPGAVersion_allowed(ty);}
};

class modelNumberAttrib: public Tango::Attr
{
public:
	modelNumberAttrib():Attr("modelNumber", Tango::DEV_STRING, Tango::READ) {};
	~modelNumberAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_modelNumber(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_modelNumber_allowed(ty);}
};

class mCUVersionAttrib: public Tango::Attr
{
public:
	mCUVersionAttrib():Attr("mCUVersion", Tango::DEV_STRING, Tango::READ) {};
	~mCUVersionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_mCUVersion(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_mCUVersion_allowed(ty);}
};

class peltierControlAttrib: public Tango::Attr
{
public:
	peltierControlAttrib():Attr("peltierControl", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~peltierControlAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_peltierControl(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_peltierControl(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_peltierControl_allowed(ty);}
};

class fanControlAttrib: public Tango::Attr
{
public:
	fanControlAttrib():Attr("fanControl", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~fanControlAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_fanControl(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_fanControl(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_fanControl_allowed(ty);}
};

class pixelClockAttrib: public Tango::Attr
{
public:
	pixelClockAttrib():Attr("pixelClock", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~pixelClockAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_pixelClock(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_pixelClock(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_pixelClock_allowed(ty);}
};

class temperatureSPAttrib: public Tango::Attr
{
public:
	temperatureSPAttrib():Attr("temperatureSP", Tango::DEV_LONG, Tango::READ_WRITE) {};
	~temperatureSPAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_temperatureSP(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_temperatureSP(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_temperatureSP_allowed(ty);}
};

class flatFieldOffsetAttrib: public Tango::Attr
{
public:
	flatFieldOffsetAttrib():Attr("flatFieldOffset", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~flatFieldOffsetAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_flatFieldOffset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_flatFieldOffset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_flatFieldOffset_allowed(ty);}
};

class flatFieldIterationAttrib: public Tango::Attr
{
public:
	flatFieldIterationAttrib():Attr("flatFieldIteration", Tango::DEV_UCHAR, Tango::READ_WRITE) {};
	~flatFieldIterationAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_flatFieldIteration(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_flatFieldIteration(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_flatFieldIteration_allowed(ty);}
};

class analogOffsetAttrib: public Tango::Attr
{
public:
	analogOffsetAttrib():Attr("analogOffset", Tango::DEV_UCHAR, Tango::READ_WRITE) {};
	~analogOffsetAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_analogOffset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_analogOffset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_analogOffset_allowed(ty);}
};

class analogGainAttrib: public Tango::Attr
{
public:
	analogGainAttrib():Attr("analogGain", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~analogGainAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_analogGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_analogGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_analogGain_allowed(ty);}
};

class strobePolarityAttrib: public Tango::Attr
{
public:
	strobePolarityAttrib():Attr("strobePolarity", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~strobePolarityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_strobePolarity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_strobePolarity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_strobePolarity_allowed(ty);}
};

class strobeOffsetMsAttrib: public Tango::Attr
{
public:
	strobeOffsetMsAttrib():Attr("strobeOffsetMs", Tango::DEV_ULONG, Tango::READ_WRITE) {};
	~strobeOffsetMsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_strobeOffsetMs(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_strobeOffsetMs(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_strobeOffsetMs_allowed(ty);}
};

class triggerPolarityAttrib: public Tango::Attr
{
public:
	triggerPolarityAttrib():Attr("triggerPolarity", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~triggerPolarityAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_triggerPolarity(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_triggerPolarity(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_triggerPolarity_allowed(ty);}
};

class horizontalFlipAttrib: public Tango::Attr
{
public:
	horizontalFlipAttrib():Attr("horizontalFlip", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~horizontalFlipAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_horizontalFlip(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_horizontalFlip(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_horizontalFlip_allowed(ty);}
};

class imageInvertAttrib: public Tango::Attr
{
public:
	imageInvertAttrib():Attr("imageInvert", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~imageInvertAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_imageInvert(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_imageInvert(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_imageInvert_allowed(ty);}
};

class defectCorrectionAttrib: public Tango::Attr
{
public:
	defectCorrectionAttrib():Attr("defectCorrection", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~defectCorrectionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_defectCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_defectCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_defectCorrection_allowed(ty);}
};

class flatFieldCorrectionAttrib: public Tango::Attr
{
public:
	flatFieldCorrectionAttrib():Attr("flatFieldCorrection", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~flatFieldCorrectionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_flatFieldCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_flatFieldCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_flatFieldCorrection_allowed(ty);}
};

class asynchronousResetAttrib: public Tango::Attr
{
public:
	asynchronousResetAttrib():Attr("asynchronousReset", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~asynchronousResetAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_asynchronousReset(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_asynchronousReset(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_asynchronousReset_allowed(ty);}
};

class lUTControlStrAttrib: public Tango::Attr
{
public:
	lUTControlStrAttrib():Attr("lUTControlStr", Tango::DEV_STRING, Tango::READ) {};
	~lUTControlStrAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_lUTControlStr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_lUTControlStr_allowed(ty);}
};

class lUTControlAttrib: public Tango::Attr
{
public:
	lUTControlAttrib():Attr("lUTControl", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~lUTControlAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_lUTControl(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_lUTControl(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_lUTControl_allowed(ty);}
};

class dataBitsStrAttrib: public Tango::Attr
{
public:
	dataBitsStrAttrib():Attr("dataBitsStr", Tango::DEV_STRING, Tango::READ) {};
	~dataBitsStrAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_dataBitsStr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_dataBitsStr_allowed(ty);}
};

class dataBitsAttrib: public Tango::Attr
{
public:
	dataBitsAttrib():Attr("dataBits", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~dataBitsAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_dataBits(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_dataBits(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_dataBits_allowed(ty);}
};

class testImageStrAttrib: public Tango::Attr
{
public:
	testImageStrAttrib():Attr("testImageStr", Tango::DEV_STRING, Tango::READ) {};
	~testImageStrAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_testImageStr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_testImageStr_allowed(ty);}
};

class testImageAttrib: public Tango::Attr
{
public:
	testImageAttrib():Attr("testImage", Tango::DEV_SHORT, Tango::READ_WRITE) {};
	~testImageAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<VieworksVP *>(dev))->read_testImage(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<VieworksVP *>(dev))->write_testImage(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<VieworksVP *>(dev))->is_testImage_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
//
// The VieworksVPClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	VieworksVPClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static VieworksVPClass *init(const char *);
	static VieworksVPClass *instance();
	~VieworksVPClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	VieworksVPClass(string &);
	static VieworksVPClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace VieworksVP_ns

#endif // _VIEWORKSVPCLASS_H
