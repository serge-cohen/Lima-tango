static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         Andor3.cpp
//
// description :  C++ source for the Andor3 and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                Andor3 are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================
#ifdef WIN32
#include <tango.h>
#include <PogoHelper.h>
#endif

#include "Andor3.h"
#include <Andor3Class.h>

#include "Andor3Camera.h"

#ifndef WIN32
#include "tango.h"
#include <PogoHelper.h>
#endif

namespace Andor3_ns
{

//+----------------------------------------------------------------------------
//
// method : 		Andor3::Andor3(string &s)
//
// description : 	constructor for simulated Andor3
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name
//
//-----------------------------------------------------------------------------
Andor3::Andor3(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
	init_device();
}

Andor3::Andor3(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
	init_device();
}

Andor3::Andor3(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		Andor3::delete_device()
//
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void Andor3::delete_device()
{
	//	Delete device allocated objects
    INFO_STREAM << "Andor3::delete_device() delete device " << device_name << endl;

  DELETE_SCALAR_ATTRIBUTE(attr_bufferOverflow_read);
  DELETE_SCALAR_ATTRIBUTE(attr_fanSpeed_read);
  //  DELETE_DEVSTRING_ATTRIBUTE(attr_fanSpeedStr_read);
  
  DELETE_SCALAR_ATTRIBUTE(attr_overlap_read);
  DELETE_SCALAR_ATTRIBUTE(attr_simpleGainControl_read);
  DELETE_DEVSTRING_ATTRIBUTE(attr_simpleGainControlStr_read);

  DELETE_SCALAR_ATTRIBUTE(attr_spuriousNoiseFilter_read);
  DELETE_SCALAR_ATTRIBUTE(attr_syncTriggering_read);

  DELETE_SCALAR_ATTRIBUTE(attr_bytesPerPixel_read);
  DELETE_DEVSTRING_ATTRIBUTE(attr_firmwareVersion_read);

  DELETE_SCALAR_ATTRIBUTE(attr_frameRate_read);
  DELETE_SCALAR_ATTRIBUTE(attr_frameRateMax_read);
  DELETE_SCALAR_ATTRIBUTE(attr_frameRateMin_read);
  DELETE_SCALAR_ATTRIBUTE(attr_fullRoiControl_read);
  DELETE_SCALAR_ATTRIBUTE(attr_imageSize_read);
  DELETE_SCALAR_ATTRIBUTE(attr_maxFrameRateTransfer_read);
  DELETE_SCALAR_ATTRIBUTE(attr_readoutTime_read);
  DELETE_DEVSTRING_ATTRIBUTE(attr_serialNumber_read);
    DELETE_SCALAR_ATTRIBUTE(attr_adcGain_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_adcGainStr_read);
    DELETE_SCALAR_ATTRIBUTE(attr_adcRate_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_adcRateStr_read);
    DELETE_SCALAR_ATTRIBUTE(attr_electronicShutterMode_read);
    DELETE_SCALAR_ATTRIBUTE(attr_temperatureSP_read);
    DELETE_SCALAR_ATTRIBUTE(attr_temperature_read);
    DELETE_SCALAR_ATTRIBUTE(attr_cooler_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_coolingStatus_read);

    //!!!! ONLY LimaDetector device can do this !!!!
    //if(m_ct!=0)
    //{
    //    ControlFactory::instance().reset("Andor3");
    //    m_ct = 0;
    //}
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::init_device()
//
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void Andor3::init_device()
{
	INFO_STREAM << "Andor3::init_device() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();

  CREATE_SCALAR_ATTRIBUTE(attr_bufferOverflow_read);
  CREATE_SCALAR_ATTRIBUTE(attr_fanSpeed_read);
  //  CREATE_DEVSTRING_ATTRIBUTE(attr_fanSpeedStr_read,MAX_STRING_LENGTH);
  
  CREATE_SCALAR_ATTRIBUTE(attr_overlap_read);
  CREATE_SCALAR_ATTRIBUTE(attr_simpleGainControl_read);
  CREATE_DEVSTRING_ATTRIBUTE(attr_simpleGainControlStr_read,MAX_STRING_LENGTH);

  CREATE_SCALAR_ATTRIBUTE(attr_spuriousNoiseFilter_read);
  CREATE_SCALAR_ATTRIBUTE(attr_syncTriggering_read);

  CREATE_SCALAR_ATTRIBUTE(attr_bytesPerPixel_read);
  CREATE_DEVSTRING_ATTRIBUTE(attr_firmwareVersion_read,MAX_STRING_LENGTH);

  CREATE_SCALAR_ATTRIBUTE(attr_frameRate_read);
  CREATE_SCALAR_ATTRIBUTE(attr_frameRateMax_read);
  CREATE_SCALAR_ATTRIBUTE(attr_frameRateMin_read);
  CREATE_SCALAR_ATTRIBUTE(attr_fullRoiControl_read);
  CREATE_SCALAR_ATTRIBUTE(attr_imageSize_read);
  CREATE_SCALAR_ATTRIBUTE(attr_maxFrameRateTransfer_read);
  CREATE_SCALAR_ATTRIBUTE(attr_readoutTime_read);
  CREATE_DEVSTRING_ATTRIBUTE(attr_serialNumber_read,MAX_STRING_LENGTH);

    CREATE_SCALAR_ATTRIBUTE(attr_adcGain_read);
    CREATE_DEVSTRING_ATTRIBUTE(attr_adcGainStr_read,MAX_STRING_LENGTH);
    CREATE_SCALAR_ATTRIBUTE(attr_adcRate_read);
    CREATE_DEVSTRING_ATTRIBUTE(attr_adcRateStr_read,MAX_STRING_LENGTH);
    CREATE_SCALAR_ATTRIBUTE(attr_electronicShutterMode_read);
    CREATE_SCALAR_ATTRIBUTE(attr_temperatureSP_read);
    CREATE_SCALAR_ATTRIBUTE(attr_temperature_read);
    CREATE_SCALAR_ATTRIBUTE(attr_cooler_read);
    CREATE_DEVSTRING_ATTRIBUTE(attr_coolingStatus_read,MAX_STRING_LENGTH);

    //By default INIT, need to ensure that all objets are OK before set the device to STANDBY
    set_state(Tango::INIT);
    m_is_device_initialized = false;
    m_status_message.str("");

    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("Andor3");

        //- get interface to specific camera
        m_hw = dynamic_cast<lima::Andor3::Interface*> (m_ct->hwInterface());
        if (m_hw == 0)
        {
            INFO_STREAM << "Initialization Failed : Unable to get the interface of camera plugin !" << std::endl;
            m_status_message << "Initialization Failed : Unable to get the interface of camera plugin !" << std::endl;
            m_is_device_initialized = false;
            set_state(Tango::FAULT);
            return;
        }

        //- get camera to specific detector
		m_camera = &(m_hw->getCamera());
		if(m_camera == 0)
		{
			INFO_STREAM<<"Initialization Failed : Unable to get the camera of plugin !"<<endl;
			m_status_message <<"Initialization Failed : Unable to get the camera object !"<< endl;
			m_is_device_initialized = false;
			set_state(Tango::FAULT);
			return;
		}

    }
    catch (Exception& e)
    {
        INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << std::endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << std::endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (...)
    {
        INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    m_is_device_initialized = true;
    set_state(Tango::STANDBY);
    this->dev_state();
}


//+----------------------------------------------------------------------------
//
// method : 		Andor3::get_device_property()
//
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void Andor3::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("BitFlowPath"));
	dev_prop.push_back(Tango::DbDatum("CameraNumber"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	Andor3Class	*ds_class =
		(static_cast<Andor3Class *>(get_device_class()));
	int	i = -1;

	//	Try to initialize BitFlowPath from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  bitFlowPath;
	else {
		//	Try to initialize BitFlowPath from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  bitFlowPath;
	}
	//	And try to extract BitFlowPath value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  bitFlowPath;

	//	Try to initialize CameraNumber from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  cameraNumber;
	else {
		//	Try to initialize CameraNumber from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  cameraNumber;
	}
	//	And try to extract CameraNumber value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cameraNumber;



	//	End of Automatic code generation
	//------------------------------------------------------------------

    create_property_if_empty(dev_prop,"/no/path/defined","BitFlowPath");
    create_property_if_empty(dev_prop,"0","CameraNumber");

}
//+----------------------------------------------------------------------------
//
// method : 		Andor3::always_executed_hook()
//
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void Andor3::always_executed_hook()
{
    DEBUG_STREAM << "Andor3::always_executed_hook() entering... " << endl;
    try
    {
        m_status_message.str("");
        //- get the singleton control objet used to pilot the lima framework
        m_ct = ControlFactory::instance().get_control("Andor3");

        //- get interface to specific detector
        if (m_ct != 0)
            m_hw = dynamic_cast<lima::Andor3::Interface*> (m_ct->hwInterface());

        //- get camera to specific detector
		m_camera = &(m_hw->getCamera());

        this->dev_state();

    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }

}
//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_attr_hardware
//
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void Andor3::read_attr_hardware(vector<long> &attr_list)
{
  //	DEBUG_STREAM << "Andor3::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here

}
//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_bytesPerPixel
// 
// description : 	Extract real attribute values for bytesPerPixel acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_bytesPerPixel(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_bytesPerPixel(Tango::Attribute &attr) entering... "<< endl;
  try
  {
    double the_bpp = 0;
		m_camera->getBytesPerPixel(the_bpp);
    *attr_bytesPerPixel_read = the_bpp;
    attr.set_value(attr_bytesPerPixel_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));

  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_firmwareVersion
// 
// description : 	Extract real attribute values for firmwareVersion acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_firmwareVersion(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_firmwareVersion(Tango::Attribute &attr) entering... "<< endl;
  std::string    the_value;
  m_camera->getFirmwareVersion(the_value);
  try {
    strcpy(*attr_firmwareVersion_read, the_value.c_str());
    attr.set_value(attr_firmwareVersion_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_frameRate
// 
// description : 	Extract real attribute values for frameRate acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_frameRate(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_frameRate(Tango::Attribute &attr) entering... "<< endl;
  try
  {
    double the_value = 0;
		m_camera->getFrameRate(the_value);
    *attr_frameRate_read = the_value;
    attr.set_value(attr_frameRate_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_frameRateMax
// 
// description : 	Extract real attribute values for frameRateMax acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_frameRateMax(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_frameRateMax(Tango::Attribute &attr) entering... "<< endl;
  try
  {
    double the_min = 0;
    double the_max = 0;
		m_camera->getFrameRateRange(the_min, the_max);
    *attr_frameRateMax_read = the_max;
    attr.set_value(attr_frameRateMax_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_frameRateMin
// 
// description : 	Extract real attribute values for frameRateMin acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_frameRateMin(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_frameRateMin(Tango::Attribute &attr) entering... "<< endl;
  try
  {
    double the_min = 0;
    double the_max = 0;
		m_camera->getFrameRateRange(the_min, the_max);
    *attr_frameRateMin_read = the_min;
    attr.set_value(attr_frameRateMin_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_fullRoiControl
// 
// description : 	Extract real attribute values for fullRoiControl acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_fullRoiControl(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_fullRoiControl(Tango::Attribute &attr) entering... "<< endl;
  bool the_value = false;
  m_camera->getFullRoiControl(the_value);
  try
  {
    *attr_fullRoiControl_read = the_value;
    attr.set_value(attr_fullRoiControl_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_imageSize
// 
// description : 	Extract real attribute values for imageSize acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_imageSize(Tango::Attribute &attr)
{
  //DEBUG_STREAM << "Andor3::read_imageSize(Tango::Attribute &attr) entering... "<< endl;
  int the_value;
  m_camera->getImageSize(the_value);
  try
  {
    *attr_imageSize_read = the_value;
    attr.set_value(attr_imageSize_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_maxFrameRateTransfer
// 
// description : 	Extract real attribute values for maxFrameRateTransfer acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_maxFrameRateTransfer(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_maxFrameRateTransfer(Tango::Attribute &attr) entering... "<< endl;
  try
  {
    double the_value = 0;
		m_camera->getMaxFrameRateTransfer(the_value);
    *attr_maxFrameRateTransfer_read = the_value;
    attr.set_value(attr_maxFrameRateTransfer_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_readoutTime
// 
// description : 	Extract real attribute values for readoutTime acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_readoutTime(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Andor3::read_readoutTime(Tango::Attribute &attr) entering... "<< endl;
  try
  {
    double the_value = 0;
		m_camera->getReadoutTime(the_value);
    *attr_readoutTime_read = the_value;
    attr.set_value(attr_readoutTime_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_serialNumber
// 
// description : 	Extract real attribute values for serialNumber acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_serialNumber(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_serialNumber(Tango::Attribute &attr) entering... "<< endl;
  std::string    the_value;
  m_camera->getSerialNumber(the_value);
  try {
    strcpy(*attr_serialNumber_read, the_value.c_str());
    attr.set_value(attr_serialNumber_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_bufferOverflow
// 
// description : 	Extract real attribute values for bufferOverflow acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_bufferOverflow(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_bufferOverflow(Tango::Attribute &attr) entering... "<< endl;
  bool the_value = false;
  m_camera->getBufferOverflow(the_value);
  try
  {
    *attr_bufferOverflow_read = the_value;
    attr.set_value(attr_bufferOverflow_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_bufferOverflow
// 
// description : 	Write bufferOverflow attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_bufferOverflow(Tango::WAttribute &attr)
{
  //	DEBUG_STREAM << "Andor3::write_bufferOverflow(Tango::WAttribute &attr) entering... "<< endl;
  try
  {
    attr.get_write_value(attr_bufferOverflow_write);
    m_camera->setBufferOverflow(attr_bufferOverflow_write);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_fanSpeed
// 
// description : 	Extract real attribute values for fanSpeed acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_fanSpeed(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_fanSpeed(Tango::Attribute &attr) entering... "<< endl;
    lima::Andor3::Camera::A3_FanSpeed		the_value;
  m_camera->getFanSpeed(the_value);
  try {
    *attr_fanSpeed_read = static_cast<int>(the_value);
    attr.set_value(attr_fanSpeed_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }

}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_fanSpeed
// 
// description : 	Write fanSpeed attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_fanSpeed(Tango::WAttribute &attr)
{
  //	DEBUG_STREAM << "Andor3::write_fanSpeed(Tango::WAttribute &attr) entering... "<< endl;
  try
  {
    attr.get_write_value(attr_fanSpeed_write);
    lima::Andor3::Camera::A3_FanSpeed		the_value = static_cast<lima::Andor3::Camera::A3_FanSpeed>(attr_fanSpeed_write);
    m_camera->setFanSpeed(the_value);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_overlap
// 
// description : 	Extract real attribute values for overlap acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_overlap(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_overlap(Tango::Attribute &attr) entering... "<< endl;
  bool the_value = false;
  m_camera->getOverlap(the_value);
  try
  {
    *attr_overlap_read = the_value;
    attr.set_value(attr_overlap_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_overlap
// 
// description : 	Write overlap attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_overlap(Tango::WAttribute &attr)
{
  //	DEBUG_STREAM << "Andor3::write_overlap(Tango::WAttribute &attr) entering... "<< endl;
  try
  {
    attr.get_write_value(attr_overlap_write);
    m_camera->setOverlap(attr_overlap_write);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_spuriousNoiseFilter
// 
// description : 	Extract real attribute values for spuriousNoiseFilter acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_spuriousNoiseFilter(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_spuriousNoiseFilter(Tango::Attribute &attr) entering... "<< endl;
  bool the_value = false;
  m_camera->getSpuriousNoiseFilter(the_value);
  try
  {
    *attr_spuriousNoiseFilter_read = the_value;
    attr.set_value(attr_spuriousNoiseFilter_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_spuriousNoiseFilter
// 
// description : 	Write spuriousNoiseFilter attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_spuriousNoiseFilter(Tango::WAttribute &attr)
{
  //	DEBUG_STREAM << "Andor3::write_spuriousNoiseFilter(Tango::WAttribute &attr) entering... "<< endl;
  try
  {
    attr.get_write_value(attr_spuriousNoiseFilter_write);
    m_camera->setSpuriousNoiseFilter(attr_spuriousNoiseFilter_write);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_syncTriggering
// 
// description : 	Extract real attribute values for syncTriggering acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_syncTriggering(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_syncTriggering(Tango::Attribute &attr) entering... "<< endl;
  bool the_value = false;
  m_camera->getSyncTriggering(the_value);
  try
  {
    *attr_syncTriggering_read = the_value;
    attr.set_value(attr_syncTriggering_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_syncTriggering
// 
// description : 	Write syncTriggering attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_syncTriggering(Tango::WAttribute &attr)
{
  //	DEBUG_STREAM << "Andor3::write_syncTriggering(Tango::WAttribute &attr) entering... "<< endl;
  try
  {
    attr.get_write_value(attr_syncTriggering_write);
    m_camera->setSyncTriggering(attr_syncTriggering_write);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_simpleGainControl
// 
// description : 	Extract real attribute values for simpleGainControl acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_simpleGainControl(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_simpleGainControl(Tango::Attribute &attr) entering... "<< endl;

  lima::Andor3::Camera::A3_SimpleGain		the_value;
  m_camera->getSimpleGain(the_value);
  try {
    *attr_simpleGainControl_read = static_cast<int>(the_value);
    attr.set_value(attr_simpleGainControl_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_simpleGainControl
// 
// description : 	Write simpleGainControl attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_simpleGainControl(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Andor3::write_simpleGainControl(Tango::WAttribute &attr) entering... "<< endl;
  try
  {
    attr.get_write_value(attr_simpleGainControl_write);
    lima::Andor3::Camera::A3_SimpleGain the_value = static_cast<lima::Andor3::Camera::A3_SimpleGain>(attr_simpleGainControl_write);
    m_camera->setSimpleGain(the_value);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_simpleGainControlStr
// 
// description : 	Extract real attribute values for simpleGainControlStr acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_simpleGainControlStr(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_simpleGainControlStr(Tango::Attribute &attr) entering... "<< endl;
  std::string    the_value;
  m_camera->getSimpleGainString(the_value);
  try {
    strcpy(*attr_simpleGainControlStr_read, the_value.c_str());
    attr.set_value(attr_simpleGainControl_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_electronicShutterModeStr
// 
// description : 	Extract real attribute values for electronicShutterModeStr acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_electronicShutterModeStr(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_electronicShutterModeStr(Tango::Attribute &attr) entering... "<< endl;
  std::string    the_value;
  m_hw->getElectronicShutterModeString(the_value);
  try {
    strcpy(*attr_electronicShutterModeStr_read, the_value.c_str());
    attr.set_value(attr_electronicShutterModeStr_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }

}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_adcGainStr
//
// description : 	Extract real attribute values for adcGainStr acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_adcGainStr(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_adcGainStr(Tango::Attribute &attr) entering... "<< endl;
  std::string    the_adc_gain_str;
  m_hw->getAdcGainString(the_adc_gain_str);
  try {
    strcpy(*attr_adcGainStr_read, the_adc_gain_str.c_str());
    attr.set_value(attr_adcGainStr_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_adcRateStr
//
// description : 	Extract real attribute values for adcRateStr acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_adcRateStr(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_adcRateStr(Tango::Attribute &attr) entering... "<< endl;

  std::string    the_adc_rate_str;
  m_hw->getAdcRateString(the_adc_rate_str);
  try {
    strcpy(*attr_adcRateStr_read, the_adc_rate_str.c_str());
    attr.set_value(attr_adcRateStr_read);
  }
  catch(Tango::DevFailed& df)
  {
    ERROR_STREAM << df << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(df,
                                      static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                      static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                      static_cast<const char*> (__PRETTY_FUNCTION__));
  }
  catch(Exception& e)
  {
    ERROR_STREAM << e.getErrMsg() << endl;
    //- throw exception
    Tango::Except::throw_exception(
                                   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                   static_cast<const char*> (e.getErrMsg().c_str()),
                                   static_cast<const char*> (__PRETTY_FUNCTION__));
  }
}
  

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_adcGain
//
// description : 	Extract real attribute values for adcGain acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_adcGain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Andor3::read_adcGain(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getAdcGain((lima::Andor3::Camera::A3_Gain&)*attr_adcGain_read);
        attr.set_value(attr_adcGain_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> (__PRETTY_FUNCTION__));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                     static_cast<const char*> (e.getErrMsg().c_str()),
                     static_cast<const char*> (__PRETTY_FUNCTION__));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_adcGain
//
// description : 	Write adcGain attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_adcGain(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Andor3::write_adcGain(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_adcGain_write);
        m_camera->setAdcGain((lima::Andor3::Camera::A3_Gain&)attr_adcGain_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::write_adcGain"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("Andor3::write_adcGain"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_adcRate
//
// description : 	Extract real attribute values for adcRate acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_adcRate(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Andor3::read_adcRate(Tango::Attribute &attr) entering... "<< endl;

    try
    {
		m_camera->getAdcRate((lima::Andor3::Camera::A3_ReadOutRate&)*attr_adcRate_read);
        attr.set_value(attr_adcRate_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> (__PRETTY_FUNCTION__));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                     static_cast<const char*> (e.getErrMsg().c_str()),
                     static_cast<const char*> (__PRETTY_FUNCTION__));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_adcRate
//
// description : 	Write adcRate attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_adcRate(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Andor3::write_adcRate(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_adcRate_write);
        m_camera->setAdcRate((lima::Andor3::Camera::A3_ReadOutRate&)attr_adcRate_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::write_adcRate"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("Andor3::write_adcRate"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_electronicShutterMode
//
// description : 	Extract real attribute values for electronicShutterMode acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_electronicShutterMode(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_electronicShutterMode(Tango::Attribute &attr) entering... "<< endl;

    try
    {
		m_camera->getElectronicShutterMode((lima::Andor3::Camera::A3_ShutterMode&)*attr_electronicShutterMode_read);
        attr.set_value(attr_electronicShutterMode_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::read_electronicShutterMode"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                     static_cast<const char*> (e.getErrMsg().c_str()),
                     static_cast<const char*> ("Andor3::read_electronicShutterMode"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_electronicShutterMode
//
// description : 	Write electronicShutterMode attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_electronicShutterMode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Andor3::write_electronicShutterMode(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_electronicShutterMode_write);
        m_camera->setElectronicShutterMode((lima::Andor3::Camera::A3_ShutterMode&)attr_electronicShutterMode_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::write_electronicShutterMode"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("Andor3::write_electronicShutterMode"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_temperatureSP
//
// description : 	Extract real attribute values for temperatureSP acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_temperatureSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Andor3::read_temperatureSP(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        double temperature_sp = 0;
		m_camera->getTemperatureSP(temperature_sp);
        *attr_temperatureSP_read = temperature_sp;
        attr.set_value(attr_temperatureSP_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::read_temperatureSP"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                     static_cast<const char*> (e.getErrMsg().c_str()),
                     static_cast<const char*> ("Andor3::read_temperatureSP"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_temperatureSP
//
// description : 	Write temperatureSP attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_temperatureSP(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Andor3::write_temperatureSP(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_temperatureSP_write);
        m_camera->setTemperatureSP(attr_temperatureSP_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::write_temperatureSP"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("Andor3::write_temperatureSP"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_temperature
//
// description : 	Extract real attribute values for temperature acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_temperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Andor3::read_temperature(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        double temperature = 0;
		m_camera->getTemperature(temperature);
        *attr_temperature_read = temperature;
        attr.set_value(attr_temperature_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::read_temperature"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                     static_cast<const char*> (e.getErrMsg().c_str()),
                     static_cast<const char*> ("Andor3::read_temperature"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_cooler
//
// description : 	Extract real attribute values for cooler acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_cooler(Tango::Attribute &attr)
{
  //	DEBUG_STREAM << "Andor3::read_cooler(Tango::Attribute &attr) entering... "<< endl;
    try
    {
        bool cooler = false;
		m_camera->getCooler(cooler);
        *attr_cooler_read = cooler;
        attr.set_value(attr_cooler_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::read_cooler"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                     static_cast<const char*> (e.getErrMsg().c_str()),
                     static_cast<const char*> ("Andor3::read_cooler"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::write_cooler
//
// description : 	Write cooler attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Andor3::write_cooler(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Andor3::write_cooler(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_cooler_write);
        m_camera->setCooler(attr_cooler_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::write_cooler"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (e.getErrMsg().c_str()),
                    static_cast<const char*> ("Andor3::write_cooler"));
    }

}

//+----------------------------------------------------------------------------
//
// method : 		Andor3::read_coolingStatus
//
// description : 	Extract real attribute values for coolingStatus acquisition result.
//
//-----------------------------------------------------------------------------
void Andor3::read_coolingStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Andor3::read_coolingStatus(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        std::string cooling_status;
		m_camera->getCoolingStatus(cooling_status);

        strcpy(*attr_coolingStatus_read, cooling_status.c_str());

        attr.set_value(attr_coolingStatus_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("Andor3::read_coolingStatus"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                     static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                     static_cast<const char*> (e.getErrMsg().c_str()),
                     static_cast<const char*> ("Andor3::read_coolingStatus"));
    }
}


//+------------------------------------------------------------------
/**
 *	method:	Andor3::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState Andor3::dev_state()
{
	Tango::DevState	argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "Andor3::dev_state(): entering... !" << endl;

	//	Add your own code to control device here

    stringstream DeviceStatus;
    DeviceStatus << "";
    Tango::DevState DeviceState = Tango::STANDBY;
    if (!m_is_device_initialized)
    {
        DeviceState = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
    {
        //state&status are retrieved from specific device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

	argout = DeviceState;
	return argout;
}

/*-------------------------------------------------------------------------
//       Andor3::create_property_if_empty
/-------------------------------------------------------------------------*/
template <class T>
void Andor3::create_property_if_empty(Tango::DbData& dev_prop,T value,string property_name)
{
    int iPropertyIndex = find_index_from_property_name(dev_prop,property_name);
    if (iPropertyIndex == -1) return;
    if (dev_prop[iPropertyIndex].is_empty())
    {
        Tango::DbDatum current_value(dev_prop[iPropertyIndex].name);
        current_value << value;
        Tango::DbData db_data;
        db_data.push_back(current_value);

        try
        {
            get_db_device()->put_property(db_data);
        }
        catch(Tango::DevFailed &df)
        {
            string message= "Error in storing " + property_name + " in Configuration DataBase ";
            LOG_ERROR((message));
            ERROR_STREAM<<df<<endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                        static_cast<const char*> ("Andor3::create_property_if_empty"));
        }
    }
}


/*-------------------------------------------------------------------------
//       Andor3::find_index_from_property_name
/-------------------------------------------------------------------------*/
int Andor3::find_index_from_property_name(Tango::DbData& dev_prop, string property_name)
{
    size_t iNbProperties = dev_prop.size();
    unsigned int i;
    for (i=0;i<iNbProperties;i++)
    {
        string sPropertyName(dev_prop[i].name);
        if (sPropertyName == property_name) return i;
    }
    if (i == iNbProperties) return -1;
    return i;
}







}	//	namespace
