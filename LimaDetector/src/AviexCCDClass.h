//=============================================================================
//
// file :         AviexCCDClass.h
//
// description :  Include for the AviexCCDClass root class.
//                This class is the singleton class for
//                the AviexCCD device class.
//                It contains all properties and methods which the 
//                AviexCCD requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _AVIEXCCDCLASS_H
#define _AVIEXCCDCLASS_H

#ifdef WIN32
#include "tango.h"
#endif
#include <AviexCCD.h>

#ifndef WIN32
#include "tango.h"
#endif

namespace AviexCCD_ns
{//=====================================
//	Define classes for attributes
//=====================================
class readoutSpeedAttrib: public Tango::Attr
{
public:
	readoutSpeedAttrib():Attr("readoutSpeed", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~readoutSpeedAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_readoutSpeed(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_readoutSpeed(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_readoutSpeed_allowed(ty);}
};

class geomCorrectionAttrib: public Tango::Attr
{
public:
	geomCorrectionAttrib():Attr("geomCorrection", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~geomCorrectionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_geomCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_geomCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_geomCorrection_allowed(ty);}
};

class floodCorrectionAttrib: public Tango::Attr
{
public:
	floodCorrectionAttrib():Attr("floodCorrection", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~floodCorrectionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_floodCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_floodCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_floodCorrection_allowed(ty);}
};

class darkCorrectionAttrib: public Tango::Attr
{
public:
	darkCorrectionAttrib():Attr("darkCorrection", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~darkCorrectionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_darkCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_darkCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_darkCorrection_allowed(ty);}
};

class biasCorrectionAttrib: public Tango::Attr
{
public:
	biasCorrectionAttrib():Attr("biasCorrection", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~biasCorrectionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_biasCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_biasCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_biasCorrection_allowed(ty);}
};

class maskCorrectionAttrib: public Tango::Attr
{
public:
	maskCorrectionAttrib():Attr("maskCorrection", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~maskCorrectionAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_maskCorrection(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_maskCorrection(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_maskCorrection_allowed(ty);}
};

class gapMultiplierAttrib: public Tango::Attr
{
public:
	gapMultiplierAttrib():Attr("gapMultiplier", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~gapMultiplierAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_gapMultiplier(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_gapMultiplier(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_gapMultiplier_allowed(ty);}
};

class exposureMultiplierAttrib: public Tango::Attr
{
public:
	exposureMultiplierAttrib():Attr("exposureMultiplier", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~exposureMultiplierAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_exposureMultiplier(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_exposureMultiplier(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_exposureMultiplier_allowed(ty);}
};

class readoutDelayTimeAttrib: public Tango::Attr
{
public:
	readoutDelayTimeAttrib():Attr("readoutDelayTime", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~readoutDelayTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_readoutDelayTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_readoutDelayTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_readoutDelayTime_allowed(ty);}
};

class initialDelayTimeAttrib: public Tango::Attr
{
public:
	initialDelayTimeAttrib():Attr("initialDelayTime", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~initialDelayTimeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_initialDelayTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_initialDelayTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_initialDelayTime_allowed(ty);}
};

class internalAcquisitionModeAttrib: public Tango::Attr
{
public:
	internalAcquisitionModeAttrib():Attr("internalAcquisitionMode", Tango::DEV_STRING, Tango::READ_WRITE) {};
	~internalAcquisitionModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<AviexCCD *>(dev))->read_internalAcquisitionMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<AviexCCD *>(dev))->write_internalAcquisitionMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<AviexCCD *>(dev))->is_internalAcquisitionMode_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
//
// The AviexCCDClass singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	AviexCCDClass : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static AviexCCDClass *init(const char *);
	static AviexCCDClass *instance();
	~AviexCCDClass();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	AviexCCDClass(string &);
	static AviexCCDClass *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace AviexCCD_ns

#endif // _AVIEXCCDCLASS_H
