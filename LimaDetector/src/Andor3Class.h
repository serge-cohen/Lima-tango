//=============================================================================
//
// file :         Andor3Class.h
//
// description :  Include for the Andor3Class root class.
//                This class is the singleton class for
//                the Andor3 device class.
//                It contains all properties and methods which the 
//                Andor3 requires only once e.g. the commands.
//			
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#ifndef _ANDOR3CLASS_H
#define _ANDOR3CLASS_H

#include <tango.h>
#include <Andor3.h>


namespace Andor3_ns
{//=====================================
//	Define classes for attributes
//=====================================
class coolingStatusAttrib: public Tango::Attr
{
public:
	coolingStatusAttrib():Attr("coolingStatus", Tango::DEV_STRING, Tango::READ) {};
	~coolingStatusAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_coolingStatus(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_coolingStatus_allowed(ty);}
};

class coolerAttrib: public Tango::Attr
{
public:
	coolerAttrib():Attr("cooler", Tango::DEV_BOOLEAN, Tango::READ_WRITE) {};
	~coolerAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_cooler(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Andor3 *>(dev))->write_cooler(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_cooler_allowed(ty);}
};

class temperatureAttrib: public Tango::Attr
{
public:
	temperatureAttrib():Attr("temperature", Tango::DEV_DOUBLE, Tango::READ) {};
	~temperatureAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_temperature(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_temperature_allowed(ty);}
};

class temperatureSPAttrib: public Tango::Attr
{
public:
	temperatureSPAttrib():Attr("temperatureSP", Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~temperatureSPAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_temperatureSP(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Andor3 *>(dev))->write_temperatureSP(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_temperatureSP_allowed(ty);}
};

class electronicShutterModeAttrib: public Tango::Attr
{
public:
	electronicShutterModeAttrib():Attr("electronicShutterMode", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~electronicShutterModeAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_electronicShutterMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Andor3 *>(dev))->write_electronicShutterMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_electronicShutterMode_allowed(ty);}
};

class adcRateStrAttrib: public Tango::Attr
{
public:
	adcRateStrAttrib():Attr("adcRateStr", Tango::DEV_STRING, Tango::READ) {};
	~adcRateStrAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_adcRateStr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_adcRateStr_allowed(ty);}
};

class adcRateAttrib: public Tango::Attr
{
public:
	adcRateAttrib():Attr("adcRate", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~adcRateAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_adcRate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Andor3 *>(dev))->write_adcRate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_adcRate_allowed(ty);}
};

class adcGainStrAttrib: public Tango::Attr
{
public:
	adcGainStrAttrib():Attr("adcGainStr", Tango::DEV_STRING, Tango::READ) {};
	~adcGainStrAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_adcGainStr(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_adcGainStr_allowed(ty);}
};

class adcGainAttrib: public Tango::Attr
{
public:
	adcGainAttrib():Attr("adcGain", Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~adcGainAttrib() {};
	
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
	{(static_cast<Andor3 *>(dev))->read_adcGain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
	{(static_cast<Andor3 *>(dev))->write_adcGain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
	{return (static_cast<Andor3 *>(dev))->is_adcGain_allowed(ty);}
};

//=========================================
//	Define classes for commands
//=========================================
//
// The Andor3Class singleton definition
//

class
#ifdef WIN32
	__declspec(dllexport)
#endif
	Andor3Class : public Tango::DeviceClass
{
public:
//	properties member data

//	add your own data members here
//------------------------------------

public:
	Tango::DbData	cl_prop;
	Tango::DbData	cl_def_prop;
	Tango::DbData	dev_def_prop;

//	Method prototypes
	static Andor3Class *init(const char *);
	static Andor3Class *instance();
	~Andor3Class();
	Tango::DbDatum	get_class_property(string &);
	Tango::DbDatum	get_default_device_property(string &);
	Tango::DbDatum	get_default_class_property(string &);
	
protected:
	Andor3Class(string &);
	static Andor3Class *_instance;
	void command_factory();
	void get_class_property();
	void attribute_factory(vector<Tango::Attr *> &);
	void write_class_property();
	void set_default_property();
	string get_cvstag();
	string get_cvsroot();

private:
	void device_factory(const Tango::DevVarStringArray *);
};


}	//	namespace Andor3_ns

#endif // _ANDOR3CLASS_H
