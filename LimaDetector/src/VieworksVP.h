//=============================================================================
//
// file :        VieworksVP.h
//
// description : Include for the VieworksVP class.
//
// project :	Specific class for VieworksVP detector
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _VIEWORKSVP_H
#define _VIEWORKSVP_H


/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------

#ifdef WIN32
#include "tango.h"
#endif

#include "HwInterface.h"
#include "CtControl.h"
#include "CtAcquisition.h"
#include "CtImage.h"
#include "Factory.h"

#ifndef WIN32
#include "tango.h"
#endif


#include <VieworksVPInterface.h>
#include <VieworksVPCamera.h>

#define MAX_STRING_LENGTH     256

using namespace lima;
using namespace std;


namespace VieworksVP_ns
{

/**
 * Class Description:
 * This class is the specific Lima device for the VieworksVP cameras (8MC,16MC,...)
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class VieworksVP: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevShort	*attr_testImage_read;
		Tango::DevShort	attr_testImage_write;
		Tango::DevString	*attr_testImageStr_read;
		Tango::DevShort	*attr_dataBits_read;
		Tango::DevShort	attr_dataBits_write;
		Tango::DevString	*attr_dataBitsStr_read;
		Tango::DevShort	*attr_lUTControl_read;
		Tango::DevShort	attr_lUTControl_write;
		Tango::DevString	*attr_lUTControlStr_read;
		Tango::DevBoolean	*attr_asynchronousReset_read;
		Tango::DevBoolean	attr_asynchronousReset_write;
		Tango::DevBoolean	*attr_flatFieldCorrection_read;
		Tango::DevBoolean	attr_flatFieldCorrection_write;
		Tango::DevBoolean	*attr_defectCorrection_read;
		Tango::DevBoolean	attr_defectCorrection_write;
		Tango::DevBoolean	*attr_imageInvert_read;
		Tango::DevBoolean	attr_imageInvert_write;
		Tango::DevBoolean	*attr_horizontalFlip_read;
		Tango::DevBoolean	attr_horizontalFlip_write;
		Tango::DevBoolean	*attr_triggerPolarity_read;
		Tango::DevBoolean	attr_triggerPolarity_write;
		Tango::DevULong	*attr_strobeOffsetMs_read;
		Tango::DevULong	attr_strobeOffsetMs_write;
		Tango::DevBoolean	*attr_strobePolarity_read;
		Tango::DevBoolean	attr_strobePolarity_write;
		Tango::DevUShort	*attr_analogGain_read;
		Tango::DevUShort	attr_analogGain_write;
		Tango::DevUChar	*attr_analogOffset_read;
		Tango::DevUChar	attr_analogOffset_write;
		Tango::DevUChar	*attr_flatFieldIteration_read;
		Tango::DevUChar	attr_flatFieldIteration_write;
		Tango::DevShort	*attr_flatFieldOffset_read;
		Tango::DevShort	attr_flatFieldOffset_write;
		Tango::DevLong	*attr_temperatureSP_read;
		Tango::DevLong	attr_temperatureSP_write;
		Tango::DevShort	*attr_pixelClock_read;
		Tango::DevShort	attr_pixelClock_write;
		Tango::DevBoolean	*attr_fanControl_read;
		Tango::DevBoolean	attr_fanControl_write;
		Tango::DevBoolean	*attr_peltierControl_read;
		Tango::DevBoolean	attr_peltierControl_write;
		Tango::DevString	*attr_mCUVersion_read;
		Tango::DevString	*attr_modelNumber_read;
		Tango::DevString	*attr_fPGAVersion_read;
		Tango::DevString	*attr_serialNumber_read;
		Tango::DevDouble	*attr_currentTemperature_read;
		Tango::DevDouble	*attr_sensorTemperature_read;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	Board Index
 */
	Tango::DevLong	boardIndex;
/**
 *	Camera Port
 */
	Tango::DevLong	cameraPort;
/**
 *	Applet Name
 */
	string	appletName;
/**
 *	DMA Index
 */
	Tango::DevULong	dMAIndex;
/**
 *	Siso Path
 */
	string	sisoPath;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	VieworksVP(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	VieworksVP(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	VieworksVP(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~VieworksVP() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name VieworksVP methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for testImage acquisition result.
 */
	virtual void read_testImage(Tango::Attribute &attr);
/**
 *	Write testImage attribute values to hardware.
 */
	virtual void write_testImage(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for testImageStr acquisition result.
 */
	virtual void read_testImageStr(Tango::Attribute &attr);
/**
 *	Extract real attribute values for dataBits acquisition result.
 */
	virtual void read_dataBits(Tango::Attribute &attr);
/**
 *	Write dataBits attribute values to hardware.
 */
	virtual void write_dataBits(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for dataBitsStr acquisition result.
 */
	virtual void read_dataBitsStr(Tango::Attribute &attr);
/**
 *	Extract real attribute values for lUTControl acquisition result.
 */
	virtual void read_lUTControl(Tango::Attribute &attr);
/**
 *	Write lUTControl attribute values to hardware.
 */
	virtual void write_lUTControl(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for lUTControlStr acquisition result.
 */
	virtual void read_lUTControlStr(Tango::Attribute &attr);
/**
 *	Extract real attribute values for asynchronousReset acquisition result.
 */
	virtual void read_asynchronousReset(Tango::Attribute &attr);
/**
 *	Write asynchronousReset attribute values to hardware.
 */
	virtual void write_asynchronousReset(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for flatFieldCorrection acquisition result.
 */
	virtual void read_flatFieldCorrection(Tango::Attribute &attr);
/**
 *	Write flatFieldCorrection attribute values to hardware.
 */
	virtual void write_flatFieldCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for defectCorrection acquisition result.
 */
	virtual void read_defectCorrection(Tango::Attribute &attr);
/**
 *	Write defectCorrection attribute values to hardware.
 */
	virtual void write_defectCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for imageInvert acquisition result.
 */
	virtual void read_imageInvert(Tango::Attribute &attr);
/**
 *	Write imageInvert attribute values to hardware.
 */
	virtual void write_imageInvert(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for horizontalFlip acquisition result.
 */
	virtual void read_horizontalFlip(Tango::Attribute &attr);
/**
 *	Write horizontalFlip attribute values to hardware.
 */
	virtual void write_horizontalFlip(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for triggerPolarity acquisition result.
 */
	virtual void read_triggerPolarity(Tango::Attribute &attr);
/**
 *	Write triggerPolarity attribute values to hardware.
 */
	virtual void write_triggerPolarity(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for strobeOffsetMs acquisition result.
 */
	virtual void read_strobeOffsetMs(Tango::Attribute &attr);
/**
 *	Write strobeOffsetMs attribute values to hardware.
 */
	virtual void write_strobeOffsetMs(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for strobePolarity acquisition result.
 */
	virtual void read_strobePolarity(Tango::Attribute &attr);
/**
 *	Write strobePolarity attribute values to hardware.
 */
	virtual void write_strobePolarity(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for analogGain acquisition result.
 */
	virtual void read_analogGain(Tango::Attribute &attr);
/**
 *	Write analogGain attribute values to hardware.
 */
	virtual void write_analogGain(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for analogOffset acquisition result.
 */
	virtual void read_analogOffset(Tango::Attribute &attr);
/**
 *	Write analogOffset attribute values to hardware.
 */
	virtual void write_analogOffset(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for flatFieldIteration acquisition result.
 */
	virtual void read_flatFieldIteration(Tango::Attribute &attr);
/**
 *	Write flatFieldIteration attribute values to hardware.
 */
	virtual void write_flatFieldIteration(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for flatFieldOffset acquisition result.
 */
	virtual void read_flatFieldOffset(Tango::Attribute &attr);
/**
 *	Write flatFieldOffset attribute values to hardware.
 */
	virtual void write_flatFieldOffset(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for temperatureSP acquisition result.
 */
	virtual void read_temperatureSP(Tango::Attribute &attr);
/**
 *	Write temperatureSP attribute values to hardware.
 */
	virtual void write_temperatureSP(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for pixelClock acquisition result.
 */
	virtual void read_pixelClock(Tango::Attribute &attr);
/**
 *	Write pixelClock attribute values to hardware.
 */
	virtual void write_pixelClock(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for fanControl acquisition result.
 */
	virtual void read_fanControl(Tango::Attribute &attr);
/**
 *	Write fanControl attribute values to hardware.
 */
	virtual void write_fanControl(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for peltierControl acquisition result.
 */
	virtual void read_peltierControl(Tango::Attribute &attr);
/**
 *	Write peltierControl attribute values to hardware.
 */
	virtual void write_peltierControl(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for mCUVersion acquisition result.
 */
	virtual void read_mCUVersion(Tango::Attribute &attr);
/**
 *	Extract real attribute values for modelNumber acquisition result.
 */
	virtual void read_modelNumber(Tango::Attribute &attr);
/**
 *	Extract real attribute values for fPGAVersion acquisition result.
 */
	virtual void read_fPGAVersion(Tango::Attribute &attr);
/**
 *	Extract real attribute values for serialNumber acquisition result.
 */
	virtual void read_serialNumber(Tango::Attribute &attr);
/**
 *	Extract real attribute values for currentTemperature acquisition result.
 */
	virtual void read_currentTemperature(Tango::Attribute &attr);
/**
 *	Extract real attribute values for sensorTemperature acquisition result.
 */
	virtual void read_sensorTemperature(Tango::Attribute &attr);
/**
 *	Read/Write allowed for testImage attribute.
 */
	virtual bool is_testImage_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for testImageStr attribute.
 */
	virtual bool is_testImageStr_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for dataBits attribute.
 */
	virtual bool is_dataBits_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for dataBitsStr attribute.
 */
	virtual bool is_dataBitsStr_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for lUTControl attribute.
 */
	virtual bool is_lUTControl_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for lUTControlStr attribute.
 */
	virtual bool is_lUTControlStr_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for asynchronousReset attribute.
 */
	virtual bool is_asynchronousReset_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for flatFieldCorrection attribute.
 */
	virtual bool is_flatFieldCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for defectCorrection attribute.
 */
	virtual bool is_defectCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for imageInvert attribute.
 */
	virtual bool is_imageInvert_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for horizontalFlip attribute.
 */
	virtual bool is_horizontalFlip_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for triggerPolarity attribute.
 */
	virtual bool is_triggerPolarity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for strobeOffsetMs attribute.
 */
	virtual bool is_strobeOffsetMs_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for strobePolarity attribute.
 */
	virtual bool is_strobePolarity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for analogGain attribute.
 */
	virtual bool is_analogGain_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for analogOffset attribute.
 */
	virtual bool is_analogOffset_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for flatFieldIteration attribute.
 */
	virtual bool is_flatFieldIteration_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for flatFieldOffset attribute.
 */
	virtual bool is_flatFieldOffset_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for temperatureSP attribute.
 */
	virtual bool is_temperatureSP_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for pixelClock attribute.
 */
	virtual bool is_pixelClock_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for fanControl attribute.
 */
	virtual bool is_fanControl_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for peltierControl attribute.
 */
	virtual bool is_peltierControl_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for mCUVersion attribute.
 */
	virtual bool is_mCUVersion_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for modelNumber attribute.
 */
	virtual bool is_modelNumber_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for fPGAVersion attribute.
 */
	virtual bool is_fPGAVersion_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for serialNumber attribute.
 */
	virtual bool is_serialNumber_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for currentTemperature attribute.
 */
	virtual bool is_currentTemperature_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for sensorTemperature attribute.
 */
	virtual bool is_sensorTemperature_allowed(Tango::AttReqType type);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	

    // return true if the device is correctly initialized in init_device
	bool is_device_initialized(){return m_is_device_initialized;};



protected :	
	//	Add your own data members here
	//-----------------------------------------

    //- Store the values into the property
    //- Properties stuff    
    int                 find_index_from_property_name(Tango::DbData& dev_prop, string property_name);
    template <class T>
    void                create_property_if_empty(Tango::DbData& dev_prop,T value, string property_name);    
    template <class T>
    void                set_property(string property_name, T value);
    template <class T>
    T                   get_property(string property_name) ;
	
    bool                m_is_device_initialized ;
    stringstream        m_status_message;
    
    //lima OBJECTS
    VieworksVP::Camera*       m_camera;    
    VieworksVP::Interface*    m_hw;
    CtControl*                m_ct;
};

}	// namespace_ns

#endif	// _VIEWORKSVP_H
