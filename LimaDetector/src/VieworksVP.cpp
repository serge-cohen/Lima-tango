static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         VieworksVP.cpp
//
// description :  C++ source for the VieworksVP and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                VieworksVP are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================



#include <VieworksVP.h>
#include <VieworksVPClass.h>
#include <tango.h>
#include <PogoHelper.h>

namespace VieworksVP_ns
{

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::VieworksVP(string &s)
// 
// description : 	constructor for simulated VieworksVP
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
VieworksVP::VieworksVP(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
	init_device();
}

VieworksVP::VieworksVP(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
	init_device();
}

VieworksVP::VieworksVP(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void VieworksVP::delete_device()
{
	//	Delete device allocated objects
    INFO_STREAM << "VieworksVP::delete_device() delete device " << device_name << endl;

    DELETE_SCALAR_ATTRIBUTE(attr_testImage_read);
    DELETE_SCALAR_ATTRIBUTE(attr_dataBits_read);
    DELETE_SCALAR_ATTRIBUTE(attr_lUTControl_read);
    DELETE_SCALAR_ATTRIBUTE(attr_asynchronousReset_read);
    DELETE_SCALAR_ATTRIBUTE(attr_flatFieldCorrection_read);
    DELETE_SCALAR_ATTRIBUTE(attr_defectCorrection_read);
    DELETE_SCALAR_ATTRIBUTE(attr_imageInvert_read);
    DELETE_SCALAR_ATTRIBUTE(attr_horizontalFlip_read);
    DELETE_SCALAR_ATTRIBUTE(attr_triggerPolarity_read);
    DELETE_SCALAR_ATTRIBUTE(attr_strobeOffsetMs_read);
    DELETE_SCALAR_ATTRIBUTE(attr_strobePolarity_read);
    DELETE_SCALAR_ATTRIBUTE(attr_analogGain_read);
    DELETE_SCALAR_ATTRIBUTE(attr_analogOffset_read);
    DELETE_SCALAR_ATTRIBUTE(attr_flatFieldIteration_read);
    DELETE_SCALAR_ATTRIBUTE(attr_flatFieldOffset_read);
    DELETE_SCALAR_ATTRIBUTE(attr_temperatureSP_read);
    DELETE_SCALAR_ATTRIBUTE(attr_pixelClock_read);
    DELETE_SCALAR_ATTRIBUTE(attr_fanControl_read);
    DELETE_SCALAR_ATTRIBUTE(attr_peltierControl_read);
    DELETE_SCALAR_ATTRIBUTE(attr_currentTemperature_read);
    DELETE_SCALAR_ATTRIBUTE(attr_sensorTemperature_read);

    DELETE_DEVSTRING_ATTRIBUTE(attr_testImageStr_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_dataBitsStr_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_adcGainStr_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_mCUVersion_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_modelNumber_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_fPGAVersion_read);
    DELETE_DEVSTRING_ATTRIBUTE(attr_serialNumber_read);

    //!!!! ONLY LimaDetector device can do this !!!!
    //if(m_ct!=0)
    //{
    //    ControlFactory::instance().reset("BaslerCCD");
    //    m_ct = 0;
    //}
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void VieworksVP::init_device()
{
	INFO_STREAM << "VieworksVP::VieworksVP() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();

    CREATE_SCALAR_ATTRIBUTE(attr_testImage_read);
    CREATE_SCALAR_ATTRIBUTE(attr_dataBits_read);
    CREATE_SCALAR_ATTRIBUTE(attr_lUTControl_read);
    CREATE_SCALAR_ATTRIBUTE(attr_asynchronousReset_read);
    CREATE_SCALAR_ATTRIBUTE(attr_flatFieldCorrection_read);
    CREATE_SCALAR_ATTRIBUTE(attr_defectCorrection_read);
    CREATE_SCALAR_ATTRIBUTE(attr_imageInvert_read);
    CREATE_SCALAR_ATTRIBUTE(attr_horizontalFlip_read);
    CREATE_SCALAR_ATTRIBUTE(attr_triggerPolarity_read);
    CREATE_SCALAR_ATTRIBUTE(attr_strobeOffsetMs_read);
    CREATE_SCALAR_ATTRIBUTE(attr_strobePolarity_read);
    CREATE_SCALAR_ATTRIBUTE(attr_analogGain_read);
    CREATE_SCALAR_ATTRIBUTE(attr_analogOffset_read);
    CREATE_SCALAR_ATTRIBUTE(attr_flatFieldIteration_read);
    CREATE_SCALAR_ATTRIBUTE(attr_flatFieldOffset_read);
    CREATE_SCALAR_ATTRIBUTE(attr_temperatureSP_read);
    CREATE_SCALAR_ATTRIBUTE(attr_pixelClock_read);
    CREATE_SCALAR_ATTRIBUTE(attr_fanControl_read);
    CREATE_SCALAR_ATTRIBUTE(attr_peltierControl_read);
    CREATE_SCALAR_ATTRIBUTE(attr_currentTemperature_read);
    CREATE_SCALAR_ATTRIBUTE(attr_sensorTemperature_read);

    CREATE_DEVSTRING_ATTRIBUTE(attr_testImageStr_read,MAX_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_dataBitsStr_read,MAX_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_adcGainStr_read,MAX_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_mCUVersion_read,MAX_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_modelNumber_read,MAX_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_fPGAVersion_read,MAX_STRING_LENGTH);
    CREATE_DEVSTRING_ATTRIBUTE(attr_serialNumber_read,MAX_STRING_LENGTH);

    //By default INIT, need to ensure that all objets are OK before set the device to STANDBY
    set_state(Tango::INIT);
    m_is_device_initialized = false;
    m_status_message.str("");

    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("VieworksVP");

        //- get interface to specific camera
        m_hw = dynamic_cast<lima::VieworksVP::Interface*> (m_ct->hwInterface());
        if (m_hw == 0)
        {
            INFO_STREAM << "Initialization Failed : Unable to get the interface of camera plugin !" << std::endl;
            m_status_message << "Initialization Failed : Unable to get the interface of camera plugin !" << std::endl;
            m_is_device_initialized = false;
            set_state(Tango::FAULT);
            return;
        }

        //- get camera to specific detector
		m_camera = &(m_hw->getCamera());
		if(m_camera == 0)
		{
			INFO_STREAM<<"Initialization Failed : Unable to get the camera of plugin !"<<endl;
			m_status_message <<"Initialization Failed : Unable to get the camera object !"<< endl;
			m_is_device_initialized = false;
			set_state(Tango::FAULT);
			return;			
		}		
    }
    catch (Exception& e)
    {
        INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << std::endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << std::endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (...)
    {
        INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }

    m_is_device_initialized = true;
    set_state(Tango::STANDBY);
    this->dev_state();
}


//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void VieworksVP::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("BoardIndex"));
	dev_prop.push_back(Tango::DbDatum("CameraPort"));
	dev_prop.push_back(Tango::DbDatum("AppletName"));
	dev_prop.push_back(Tango::DbDatum("DMAIndex"));
	dev_prop.push_back(Tango::DbDatum("SisoPath"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	VieworksVPClass	*ds_class =
		(static_cast<VieworksVPClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize BoardIndex from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  boardIndex;
	else {
		//	Try to initialize BoardIndex from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  boardIndex;
	}
	//	And try to extract BoardIndex value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  boardIndex;

	//	Try to initialize CameraPort from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  cameraPort;
	else {
		//	Try to initialize CameraPort from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  cameraPort;
	}
	//	And try to extract CameraPort value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cameraPort;

	//	Try to initialize AppletName from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  appletName;
	else {
		//	Try to initialize AppletName from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  appletName;
	}
	//	And try to extract AppletName value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  appletName;

	//	Try to initialize DMAIndex from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  dMAIndex;
	else {
		//	Try to initialize DMAIndex from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  dMAIndex;
	}
	//	And try to extract DMAIndex value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  dMAIndex;

	//	Try to initialize SisoPath from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  sisoPath;
	else {
		//	Try to initialize SisoPath from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  sisoPath;
	}
	//	And try to extract SisoPath value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  sisoPath;



	//	End of Automatic code generation
	//------------------------------------------------------------------

    create_property_if_empty(dev_prop,"0","BoardIndex");
    create_property_if_empty(dev_prop,"0","CameraPort");
    create_property_if_empty(dev_prop,"no_name","AppletName");
    create_property_if_empty(dev_prop,"0","DMAIndex");
    create_property_if_empty(dev_prop,"/no/path/","SisoPath");

}
//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void VieworksVP::always_executed_hook()
{
    //- update state
    dev_state();	
}
//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "VieworksVP::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_testImage
// 
// description : 	Extract real attribute values for testImage acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_testImage(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_testImage(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getTestImage((lima::VieworksVP::Camera::VP_test_image&)*attr_testImage_read);
        attr.set_value(attr_testImage_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_testImage"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_testImage"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_testImage
// 
// description : 	Write testImage attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_testImage(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_testImage(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_testImage_write);
        m_camera->setTestImage((lima::VieworksVP::Camera::VP_test_image&)attr_testImage_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_testImage"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_testImage"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_testImageStr
// 
// description : 	Extract real attribute values for testImageStr acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_testImageStr(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_testImageStr(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_dataBits
// 
// description : 	Extract real attribute values for dataBits acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_dataBits(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_dataBits(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getDataBits((lima::VieworksVP::Camera::VP_data_bits&)*attr_dataBits_read);
        attr.set_value(attr_dataBits_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_dataBits"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_dataBits"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_dataBits
// 
// description : 	Write dataBits attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_dataBits(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_dataBits(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_dataBits_write);
        m_camera->setDataBits((lima::VieworksVP::Camera::VP_data_bits&)attr_dataBits_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_dataBits"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_dataBits"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_dataBitsStr
// 
// description : 	Extract real attribute values for dataBitsStr acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_dataBitsStr(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_dataBitsStr(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_lUTControl
// 
// description : 	Extract real attribute values for lUTControl acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_lUTControl(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_lUTControl(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getLUTcontrol((lima::VieworksVP::Camera::VP_LUT_control&)*attr_lUTControl_read);
        attr.set_value(attr_lUTControl_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_lUTControl"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_lUTControl"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_lUTControl
// 
// description : 	Write lUTControl attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_lUTControl(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_lUTControl(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_lUTControl_write);
        m_camera->setLUTcontrol((lima::VieworksVP::Camera::VP_LUT_control&)attr_lUTControl_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_lUTControl"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_lUTControl"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_lUTControlStr
// 
// description : 	Extract real attribute values for lUTControlStr acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_lUTControlStr(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_lUTControlStr(Tango::Attribute &attr) entering... "<< endl;
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_asynchronousReset
// 
// description : 	Extract real attribute values for asynchronousReset acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_asynchronousReset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_asynchronousReset(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getAsynchronousReset(*attr_asynchronousReset_read);
        attr.set_value(attr_asynchronousReset_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_asynchronousReset"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_asynchronousReset"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_asynchronousReset
// 
// description : 	Write asynchronousReset attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_asynchronousReset(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_asynchronousReset(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_asynchronousReset_write);
        m_camera->setAsynchronousReset(attr_asynchronousReset_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_asynchronousReset"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_asynchronousReset"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_flatFieldCorrection
// 
// description : 	Extract real attribute values for flatFieldCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_flatFieldCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_flatFieldCorrection(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getFlatFieldCorrection(*attr_flatFieldCorrection_read);
        attr.set_value(attr_flatFieldCorrection_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_flatFieldCorrection"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_flatFieldCorrection"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_flatFieldCorrection
// 
// description : 	Write flatFieldCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_flatFieldCorrection(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_flatFieldCorrection(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_flatFieldCorrection_write);
        m_camera->setFlatFieldCorrection(attr_flatFieldCorrection_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_flatFieldCorrection"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_flatFieldCorrection"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_defectCorrection
// 
// description : 	Extract real attribute values for defectCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_defectCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_defectCorrection(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getDefectCorrection(*attr_defectCorrection_read);
        attr.set_value(attr_defectCorrection_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_defectCorrection"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_defectCorrection"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_defectCorrection
// 
// description : 	Write defectCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_defectCorrection(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_defectCorrection(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_defectCorrection_write);
        m_camera->setDefectCorrection(attr_defectCorrection_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_defectCorrection"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_defectCorrection"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_imageInvert
// 
// description : 	Extract real attribute values for imageInvert acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_imageInvert(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_imageInvert(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getImageInvert(*attr_imageInvert_read);
        attr.set_value(attr_imageInvert_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_imageInvert"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_imageInvert"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_imageInvert
// 
// description : 	Write imageInvert attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_imageInvert(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_imageInvert(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_imageInvert_write);
        m_camera->setImageInvert(attr_imageInvert_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_imageInvert"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_imageInvert"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_horizontalFlip
// 
// description : 	Extract real attribute values for horizontalFlip acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_horizontalFlip(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_horizontalFlip(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getHorizontalFlip(*attr_horizontalFlip_read);
        attr.set_value(attr_horizontalFlip_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_horizontalFlip"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_horizontalFlip"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_horizontalFlip
// 
// description : 	Write horizontalFlip attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_horizontalFlip(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_horizontalFlip(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_horizontalFlip_write);
        m_camera->setHorizontalFlip(attr_horizontalFlip_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_horizontalFlip"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_horizontalFlip"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_triggerPolarity
// 
// description : 	Extract real attribute values for triggerPolarity acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_triggerPolarity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_triggerPolarity(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getTriggerPolaroty(*attr_triggerPolarity_read);
        attr.set_value(attr_triggerPolarity_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_triggerPolarity"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_triggerPolarity"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_triggerPolarity
// 
// description : 	Write triggerPolarity attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_triggerPolarity(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_triggerPolarity(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_triggerPolarity_write);
        m_camera->setTriggerPolarity(attr_triggerPolarity_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_triggerPolarity"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_triggerPolarity"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_strobeOffsetMs
// 
// description : 	Extract real attribute values for strobeOffsetMs acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_strobeOffsetMs(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_strobeOffsetMs(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getStrobeOffsetMus(*attr_strobeOffsetMs_read);
        *attr_strobeOffsetMs_read = *attr_strobeOffsetMs_read / 1000; //- plugin return us so we transform into ms
        attr.set_value(attr_strobeOffsetMs_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_strobeOffsetMs"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_strobeOffsetMs"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_strobeOffsetMs
// 
// description : 	Write strobeOffsetMs attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_strobeOffsetMs(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_strobeOffsetMs(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_strobeOffsetMs_write);
        attr_strobeOffsetMs_write = attr_strobeOffsetMs_write * 1000; //- plugin want us so we transform into us
        m_camera->setStrobeOffsetMus(attr_strobeOffsetMs_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_strobeOffsetMs"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_strobeOffsetMs"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_strobePolarity
// 
// description : 	Extract real attribute values for strobePolarity acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_strobePolarity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_strobePolarity(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getStrobePolarity(*attr_strobePolarity_read);
        attr.set_value(attr_strobePolarity_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_strobePolarity"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_strobePolarity"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_strobePolarity
// 
// description : 	Write strobePolarity attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_strobePolarity(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_strobePolarity(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_strobePolarity_write);
        m_camera->setStrobePolarity(attr_strobePolarity_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_strobePolarity"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_strobePolarity"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_analogGain
// 
// description : 	Extract real attribute values for analogGain acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_analogGain(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_analogGain(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getAnalogGain(*attr_analogGain_read);
        attr.set_value(attr_analogGain_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_analogGain"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_analogGain"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_analogGain
// 
// description : 	Write analogGain attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_analogGain(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_analogGain(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_analogGain_write);
        m_camera->setAnalogGain(attr_analogGain_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_analogGain"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_analogGain"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_analogOffset
// 
// description : 	Extract real attribute values for analogOffset acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_analogOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_analogOffset(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getAnalogOffset(*attr_analogOffset_read);
        attr.set_value(attr_analogOffset_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_analogOffset"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_analogOffset"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_analogOffset
// 
// description : 	Write analogOffset attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_analogOffset(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_analogOffset(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_analogOffset_write);
        m_camera->setAnalogOffset(attr_analogOffset_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_analogOffset"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_analogOffset"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_flatFieldIteration
// 
// description : 	Extract real attribute values for flatFieldIteration acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_flatFieldIteration(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_flatFieldIteration(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getFlatFieldIteration(*attr_flatFieldIteration_read);
        attr.set_value(attr_flatFieldIteration_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_flatFieldIteration"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_flatFieldIteration"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_flatFieldIteration
// 
// description : 	Write flatFieldIteration attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_flatFieldIteration(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_flatFieldIteration(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_flatFieldIteration_write);
        m_camera->setFlatFieldIteration(attr_flatFieldIteration_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_flatFieldIteration"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_flatFieldIteration"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_flatFieldOffset
// 
// description : 	Extract real attribute values for flatFieldOffset acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_flatFieldOffset(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_flatFieldOffset(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getFlatFieldOffset(*attr_flatFieldOffset_read);
        attr.set_value(attr_flatFieldOffset_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_flatFieldOffset"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_flatFieldOffset"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_flatFieldOffset
// 
// description : 	Write flatFieldOffset attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_flatFieldOffset(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_flatFieldOffset(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_flatFieldOffset_write);
        m_camera->setFlatFieldOffset(attr_flatFieldOffset_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_flatFieldOffset"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_flatFieldOffset"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_temperatureSP
// 
// description : 	Extract real attribute values for temperatureSP acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_temperatureSP(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_temperatureSP(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getTemperatureSP(*attr_temperatureSP_read);
        attr.set_value(attr_temperatureSP_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_temperatureSP"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_temperatureSP"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_temperatureSP
// 
// description : 	Write temperatureSP attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_temperatureSP(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_temperatureSP(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_temperatureSP_write);
        m_camera->setTemperatureSP(attr_temperatureSP_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_temperatureSP"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_temperatureSP"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_pixelClock
// 
// description : 	Extract real attribute values for pixelClock acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_pixelClock(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_pixelClock(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getPixelClock((lima::VieworksVP::Camera::VP_pixel_clock&)*attr_pixelClock_read);
        attr.set_value(attr_pixelClock_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_pixelClock"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_pixelClock"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_pixelClock
// 
// description : 	Write pixelClock attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_pixelClock(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_pixelClock(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_pixelClock_write);
        m_camera->setPixelClock((lima::VieworksVP::Camera::VP_pixel_clock&)attr_pixelClock_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_pixelClock"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_pixelClock"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_fanControl
// 
// description : 	Extract real attribute values for fanControl acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_fanControl(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_fanControl(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getFanStatus(*attr_fanControl_read);
        attr.set_value(attr_fanControl_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_fanControl"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_fanControl"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_fanControl
// 
// description : 	Write fanControl attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_fanControl(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_fanControl(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_fanControl_write);
        m_camera->setFanStatus(attr_fanControl_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_fanControl"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_fanControl"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_peltierControl
// 
// description : 	Extract real attribute values for peltierControl acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_peltierControl(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_peltierControl(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getPeltierControl(*attr_peltierControl_read);
        attr.set_value(attr_peltierControl_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_peltierControl"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_peltierControl"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::write_peltierControl
// 
// description : 	Write peltierControl attribute values to hardware.
//
//-----------------------------------------------------------------------------
void VieworksVP::write_peltierControl(Tango::WAttribute &attr)
{
	INFO_STREAM << "VieworksVP::write_peltierControl(Tango::WAttribute &attr) entering... "<< endl;

    try
    {
        attr.get_write_value(attr_peltierControl_write);
        m_camera->setPeltierControl(attr_peltierControl_write);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::write_peltierControl"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::write_peltierControl"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_mCUVersion
// 
// description : 	Extract real attribute values for mCUVersion acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_mCUVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_mCUVersion(Tango::Attribute &attr) entering... "<< endl;

    try 
    {
        std::string mcu_version_str;
        m_camera->getMCUversion(mcu_version_str);

        strcpy(*attr_mCUVersion_read, mcu_version_str.c_str());
        attr.set_value(attr_mCUVersion_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_mCUVersion"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_mCUVersion"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_modelNumber
// 
// description : 	Extract real attribute values for modelNumber acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_modelNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_modelNumber(Tango::Attribute &attr) entering... "<< endl;

    try 
    {
        std::string model_number_str;
        m_camera->getModelNumber(model_number_str);

        strcpy(*attr_modelNumber_read, model_number_str.c_str());
        attr.set_value(attr_modelNumber_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_modelNumber"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_modelNumber"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_fPGAVersion
// 
// description : 	Extract real attribute values for fPGAVersion acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_fPGAVersion(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_fPGAVersion(Tango::Attribute &attr) entering... "<< endl;

    try 
    {
        std::string fpga_version_str;
        m_camera->getFPGAversion(fpga_version_str);

        strcpy(*attr_fPGAVersion_read, fpga_version_str.c_str());
        attr.set_value(attr_fPGAVersion_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_fPGAVersion"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_fPGAVersion"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_serialNumber
// 
// description : 	Extract real attribute values for serialNumber acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_serialNumber(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_serialNumber(Tango::Attribute &attr) entering... "<< endl;

    try 
    {
        std::string serial_number_str;
        m_camera->getSerialNumber(serial_number_str);

        strcpy(*attr_serialNumber_read, serial_number_str.c_str());
        attr.set_value(attr_serialNumber_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_serialNumber"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_serialNumber"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_currentTemperature
// 
// description : 	Extract real attribute values for currentTemperature acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_currentTemperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_currentTemperature(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getCurrentTemperature(*attr_currentTemperature_read);
        attr.set_value(attr_currentTemperature_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_currentTemperature"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_currentTemperature"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		VieworksVP::read_sensorTemperature
// 
// description : 	Extract real attribute values for sensorTemperature acquisition result.
//
//-----------------------------------------------------------------------------
void VieworksVP::read_sensorTemperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "VieworksVP::read_sensorTemperature(Tango::Attribute &attr) entering... "<< endl;

    try
    {
        m_camera->getSensorTemperature(*attr_sensorTemperature_read);
        attr.set_value(attr_sensorTemperature_read);
    }
    catch(Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
            static_cast<const char*> ("TANGO_DEVICE_ERROR"),
            static_cast<const char*> (string(df.errors[0].desc).c_str()),
            static_cast<const char*> ("VieworksVP::read_sensorTemperature"));
    }
    catch(Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
            static_cast<const char*> ("LIMA_ERROR"),
            static_cast<const char*> (e.getErrMsg().c_str()),
            static_cast<const char*> ("VieworksVP::read_sensorTemperature"));
    }
}


//+------------------------------------------------------------------
/**
 *	method:	VieworksVP::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState VieworksVP::dev_state()
{
	Tango::DevState	argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "VieworksVP::dev_state(): entering... !" << endl;

	//	Add your own code to control device here

	stringstream DeviceStatus;
    DeviceStatus << "";
    Tango::DevState DeviceState = Tango::STANDBY;
    if (!m_is_device_initialized)
    {
        DeviceState = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
    {
        //state&status are retrieved from specific device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

    argout = DeviceState;
    return argout;
}

/*-------------------------------------------------------------------------
// VieworksVP::create_property_if_empty
/-------------------------------------------------------------------------*/
template <class T>
void VieworksVP::create_property_if_empty(Tango::DbData& dev_prop,T value,string property_name)
{
    int iPropertyIndex = find_index_from_property_name(dev_prop,property_name);
    if (iPropertyIndex == -1) return;
    if (dev_prop[iPropertyIndex].is_empty())
    {
        Tango::DbDatum current_value(dev_prop[iPropertyIndex].name);
        current_value << value;
        Tango::DbData db_data;
        db_data.push_back(current_value);

        try
        {
            get_db_device()->put_property(db_data);
        }
        catch(Tango::DevFailed &df)
        {
            string message= "Error in storing " + property_name + " in Configuration DataBase ";
            LOG_ERROR((message));
            ERROR_STREAM<<df<<endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                        static_cast<const char*> ("VieworksVP::create_property_if_empty"));
        }
    }
}


/*-------------------------------------------------------------------------
// VieworksVP::find_index_from_property_name
/-------------------------------------------------------------------------*/
int VieworksVP::find_index_from_property_name(Tango::DbData& dev_prop, string property_name)
{
    size_t iNbProperties = dev_prop.size();
    unsigned int i;
    for (i=0;i<iNbProperties;i++)
    {
        string sPropertyName(dev_prop[i].name);
        if (sPropertyName == property_name) return i;
    }
    if (i == iNbProperties) return -1;
    return i;
}


}	//	namespace
