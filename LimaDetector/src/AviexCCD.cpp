static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         AviexCCD.cpp
//
// description :  C++ source for the AviexCCD and its commands.
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                AviexCCD are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//          This file is generated by POGO
//    (Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================
#ifdef WIN32
#include "tango.h"
#include <PogoHelper.h>
#endif
#include <AviexCCD.h>
#include <AviexCCDClass.h>

#ifndef WIN32
#include "tango.h"
#include <PogoHelper.h>
#endif

namespace AviexCCD_ns
{

//+----------------------------------------------------------------------------
//
// method :         AviexCCD::AviexCCD(string &s)
//
// description :     constructor for simulated AviexCCD
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name
//
//-----------------------------------------------------------------------------

AviexCCD::AviexCCD(Tango::DeviceClass *cl, string &s)
: Tango::Device_4Impl(cl, s.c_str())
{
    init_device();
}

AviexCCD::AviexCCD(Tango::DeviceClass *cl, const char *s)
: Tango::Device_4Impl(cl, s)
{
    init_device();
}

AviexCCD::AviexCCD(Tango::DeviceClass *cl, const char *s, const char *d)
: Tango::Device_4Impl(cl, s, d)
{
    init_device();
}
//+----------------------------------------------------------------------------
//
// method :         AviexCCD::delete_device()
//
// description :     will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------

void AviexCCD::delete_device()
{
    INFO_STREAM << "AviexCCD::AviexCCD() delete device " << device_name << endl;
    DELETE_DEVSTRING_ATTRIBUTE(attr_internalAcquisitionMode_read);

    //    Delete device allocated objects

    //!!!! ONLY LimaDetector device can do this !!!!
    //if(m_ct!=0)
    //{
    //    ControlFactory::instance().reset("AviexCCD");
    //    m_ct = 0;
    //}
}

//+----------------------------------------------------------------------------
//
// method :         AviexCCD::init_device()
//
// description :     will be called at device initialization.
//
//-----------------------------------------------------------------------------

void AviexCCD::init_device()
{
    INFO_STREAM << "AviexCCD::AviexCCD() create device " << device_name << endl;

    // Initialise variables to default values
    //--------------------------------------------
    get_device_property();
    CREATE_DEVSTRING_ATTRIBUTE(attr_internalAcquisitionMode_read, MAX_ATTRIBUTE_STRING_LENGTH);
    m_is_device_initialized = false;
    set_state(Tango::INIT);
    m_status_message.str("");

    try
    {
        //- get the main object used to pilot the lima framework
        //in fact LimaDetector is create the singleton control objet
        //so this call, will only return existing object, no need to give it the ip !!
        m_ct = ControlFactory::instance().get_control("AviexCCD");

        //- get interface to specific camera
        m_hw = dynamic_cast<Aviex::Interface*> (m_ct->hwInterface());
        if (m_hw == 0)
        {
            INFO_STREAM << "Initialization Failed : Unable to get the interface of camera plugin " << "(" << "AviexCCD" << ") !" << endl;
            m_status_message << "Initialization Failed : Unable to get the interface of camera plugin " << "(" << "AviexCCD" << ") !" << endl;
            m_is_device_initialized = false;
            set_state(Tango::FAULT);
            return;
        }

        //- get camera to specific detector
        m_camera = &(m_hw->getCamera());
        if (m_camera == 0)
        {
            INFO_STREAM << "Initialization Failed : Unable to get the camera of plugin !" << endl;
            m_status_message << "Initialization Failed : Unable to get the camera object !" << endl;
            m_is_device_initialized = false;
            set_state(Tango::FAULT);
            return;
        }

    }
    catch (Exception& e)
    {
        INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (...)
    {
        INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }

    //write at init
    try
    {
        Tango::WAttribute &acquisitionMode = dev_attr->get_w_attr_by_name("internalAcquisitionMode");
        m_acquisition_mode = memorizedInternalAcquisitionMode;
        strcpy(*attr_internalAcquisitionMode_read, m_acquisition_mode.c_str());
        acquisitionMode.set_write_value(m_acquisition_mode);
        write_internalAcquisitionMode(acquisitionMode);

    }
    catch (Exception& e)
    {
        INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        m_is_device_initialized = false;
        set_state(Tango::FAULT);
        return;
    }
    catch (...)
    {
        INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }

    m_is_device_initialized = true;
    set_state(Tango::STANDBY);
    this->dev_state();
}


//+----------------------------------------------------------------------------
//
// method :         AviexCCD::get_device_property()
//
// description :     Read the device properties from database.
//
//-----------------------------------------------------------------------------

void AviexCCD::get_device_property()
{
    //    Initialize your default values here (if not done with  POGO).
    //------------------------------------------------------------------

    //    Read device properties from database.(Automatic code generation)
    //------------------------------------------------------------------
    Tango::DbData dev_prop;
    dev_prop.push_back(Tango::DbDatum("DetectorID"));
    dev_prop.push_back(Tango::DbDatum("MxDatabaseFileFullName"));
    dev_prop.push_back(Tango::DbDatum("MemorizedInternalAcquisitionMode"));

    //	Call database and extract values
    //--------------------------------------------
    if (Tango::Util::instance()->_UseDb == true)
        get_db_device()->get_property(dev_prop);
    Tango::DbDatum def_prop, cl_prop;
    AviexCCDClass *ds_class =
        (static_cast<AviexCCDClass *> (get_device_class()));
    int i = -1;

    //	Try to initialize DetectorID from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false) cl_prop >> detectorID;
    else
    {
        //	Try to initialize DetectorID from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false) def_prop >> detectorID;
    }
    //	And try to extract DetectorID value from database
    if (dev_prop[i].is_empty() == false) dev_prop[i] >> detectorID;

    //	Try to initialize MxDatabaseFileFullName from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false) cl_prop >> mxDatabaseFileFullName;
    else
    {
        //	Try to initialize MxDatabaseFileFullName from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false) def_prop >> mxDatabaseFileFullName;
    }
    //	And try to extract MxDatabaseFileFullName value from database
    if (dev_prop[i].is_empty() == false) dev_prop[i] >> mxDatabaseFileFullName;

    //	Try to initialize MemorizedInternalAcquisitionMode from class property
    cl_prop = ds_class->get_class_property(dev_prop[++i].name);
    if (cl_prop.is_empty() == false) cl_prop >> memorizedInternalAcquisitionMode;
    else
    {
        //	Try to initialize MemorizedInternalAcquisitionMode from default device value
        def_prop = ds_class->get_default_device_property(dev_prop[i].name);
        if (def_prop.is_empty() == false) def_prop >> memorizedInternalAcquisitionMode;
    }
    //	And try to extract MemorizedInternalAcquisitionMode value from database
    if (dev_prop[i].is_empty() == false) dev_prop[i] >> memorizedInternalAcquisitionMode;



    //    End of Automatic code generation
    //------------------------------------------------------------------
    create_property_if_empty(dev_prop, "MUST_BE_DEFINED", "DetectorID");
    create_property_if_empty(dev_prop, "MUST_BE_DEFINED", "MxDatabaseFileFullName");
    create_property_if_empty(dev_prop, "STANDARD", "MemorizedInternalAcquisitionMode");

}
//+----------------------------------------------------------------------------
//
// method :         AviexCCD::always_executed_hook()
//
// description :     method always executed before any command is executed
//
//-----------------------------------------------------------------------------

void AviexCCD::always_executed_hook()
{
    DEBUG_STREAM << "AviexCCD::always_executed_hook() entering... " << endl;
    
    //- update state
    dev_state();
}


//+----------------------------------------------------------------------------
//
// method :         AviexCCD::read_attr_hardware
//
// description :     Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------

void AviexCCD::read_attr_hardware(vector<long> &attr_list)
{
    DEBUG_STREAM << "AviexCCD::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
    //    Add your own code here
}

//+----------------------------------------------------------------------------
//
// method : 		AviexCCD::read_internalAcquisitionMode
// 
// description : 	Extract real attribute values for internalAcquisitionMode acquisition result.
//
//-----------------------------------------------------------------------------

void AviexCCD::read_internalAcquisitionMode(Tango::Attribute &attr)
{
    DEBUG_STREAM << "AviexCCD::read_internalAcquisitionMode(Tango::Attribute &attr) entering... " << endl;
    try
    {
        std::string acq_mode = m_camera->getInternalAcqMode();
        strcpy(*attr_internalAcquisitionMode_read, acq_mode.c_str());

        attr.set_value(attr_internalAcquisitionMode_read);
    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("AviexCCD::read_internalAcquisitionMode"));
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> (e.getErrMsg().c_str()),
                                       static_cast<const char*> ("AviexCCD::read_internalAcquisitionMode"));
    }
}

//+----------------------------------------------------------------------------
//
// method : 		AviexCCD::write_internalAcquisitionMode
// 
// description : 	Write internalAcquisitionMode attribute values to hardware.
//
//-----------------------------------------------------------------------------

void AviexCCD::write_internalAcquisitionMode(Tango::WAttribute &attr)
{
    DEBUG_STREAM << "AviexCCD::write_internalAcquisitionMode(Tango::WAttribute &attr) entering... " << endl;
    try
    {
        m_acquisition_mode = *attr_internalAcquisitionMode_read;
        string previous = m_acquisition_mode;
        attr.get_write_value(attr_internalAcquisitionMode_write);
        string current = attr_internalAcquisitionMode_write;

        if (current != "CONTINUOUS" &&
            current != "MULTIFRAME" &&
            current != "GEOMETRICAL" &&
            current != "MAJOR_DARK_FRAME")
        {
            m_acquisition_mode = previous;
            attr_internalAcquisitionMode_write = new char [m_acquisition_mode.size() + 1];
            strcpy(attr_internalAcquisitionMode_write, m_acquisition_mode.c_str());

            Tango::Except::throw_exception((const char*) ("CONFIGURATION_ERROR"),
                                           (const char*) ("Available Internal Acquisition Modes are:"
                                           "\n- CONTINUOUS"
                                           "\n- MULTIFRAME"
                                           "\n- GEOMETRICAL"
                                           "\n- MAJOR_DARK_FRAME"),
                                           (const char*) ("AviexCCD::write_internalAcquisitionMode"));
        }

        //- THIS IS AN AVAILABLE ACQUISTION MODE
        m_acquisition_mode = attr_internalAcquisitionMode_write;

        m_camera->setInternalAcqMode(m_acquisition_mode);
        set_property("MemorizedInternalAcquisitionMode", m_acquisition_mode);

    }
    catch (Tango::DevFailed& df)
    {
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("AviexCCD::write_internalAcquisitionMode"));
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        //- throw exception
        Tango::Except::throw_exception(
                                       static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> (e.getErrMsg().c_str()),
                                       static_cast<const char*> ("AviexCCD::write_internalAcquisitionMode"));
    }
}



//+------------------------------------------------------------------
/**
 *    method:    AviexCCD::dev_state
 *
 *    description:    method to execute "State"
 *    This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return    State Code
 *
 */
//+------------------------------------------------------------------

Tango::DevState AviexCCD::dev_state()
{
    Tango::DevState argout = DeviceImpl::dev_state();
    DEBUG_STREAM << "AviexCCD::dev_state(): entering... !" << endl;


    //    Add your own code to control device here

    stringstream DeviceStatus;
    DeviceStatus << "";
    Tango::DevState DeviceState = Tango::STANDBY;
    if (!m_is_device_initialized)
    {
        DeviceState = Tango::FAULT;
        DeviceStatus << m_status_message.str();
    }
    else
    {
        //state&status are retrieved from specific device
        DeviceState = ControlFactory::instance().get_state();
        DeviceStatus << ControlFactory::instance().get_status();
    }

    set_state(DeviceState);
    set_status(DeviceStatus.str());

    argout = DeviceState;

    return argout;
}

/*-------------------------------------------------------------------------
//       AviexCCD::set_property
/-------------------------------------------------------------------------*/
template <class T>
void AviexCCD::set_property(string property_name, T value)
{
    if (!Tango::Util::instance()->_UseDb)
    {
        //- rethrow exception
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("NO DB"),
                                       static_cast<const char*> ("AviexCCD::set_property"));
    }

    Tango::DbDatum current_value(property_name);
    current_value << value;
    Tango::DbData db_data;
    db_data.push_back(current_value);
    try
    {
        get_db_device()->put_property(db_data);
    }
    catch (Tango::DevFailed &df)
    {
        string message = "Error in storing " + property_name + " in Configuration DataBase ";
        LOG_ERROR((message));
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("AviexCCD::set_property"));
    }
}

/*-------------------------------------------------------------------------
//       AviexCCD::get_property
/-------------------------------------------------------------------------*/
template <class T>
T AviexCCD::get_property(string property_name)
{
    if (!Tango::Util::instance()->_UseDb)
    {
        //- rethrow exception
        Tango::Except::throw_exception(static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                       static_cast<const char*> ("NO DB"),
                                       static_cast<const char*> ("AviexCCD::get_property"));
    }

    T value;
    Tango::DbDatum current_value(property_name);
    Tango::DbData db_data;
    db_data.push_back(current_value);
    try
    {
        get_db_device()->get_property(db_data);
    }
    catch (Tango::DevFailed &df)
    {
        string message = "Error in reading " + property_name + " in Configuration DataBase ";
        LOG_ERROR((message));
        ERROR_STREAM << df << endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                                          static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                          static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                          static_cast<const char*> ("AviexCCD::get_property"));
    }
    db_data[0] >> value;
    return (value);
}

/*-------------------------------------------------------------------------
//       AviexCCD::create_property_if_empty
/-------------------------------------------------------------------------*/
template <class T>
void AviexCCD::create_property_if_empty(Tango::DbData& dev_prop, T value, string property_name)
{
    int iPropertyIndex = find_index_from_property_name(dev_prop, property_name);
    if (iPropertyIndex == -1) return;
    if (dev_prop[iPropertyIndex].is_empty())
    {
        Tango::DbDatum current_value(dev_prop[iPropertyIndex].name);
        current_value << value;
        Tango::DbData db_data;
        db_data.push_back(current_value);

        try
        {
            get_db_device()->put_property(db_data);
        }
        catch (Tango::DevFailed &df)
        {
            string message = "Error in storing " + property_name + " in Configuration DataBase ";
            LOG_ERROR((message));
            ERROR_STREAM << df << endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                                              static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                              static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                              static_cast<const char*> ("AviexCCD::create_property_if_empty"));
        }
    }
}

/*-------------------------------------------------------------------------
//       AviexCCD::find_index_from_property_name
/-------------------------------------------------------------------------*/
int AviexCCD::find_index_from_property_name(Tango::DbData& dev_prop, string property_name)
{
    size_t iNbProperties = dev_prop.size();
    unsigned int i;
    for (i = 0; i < iNbProperties; i++)
    {
        string sPropertyName(dev_prop[i].name);
        if (sPropertyName == property_name) return i;
    }
    if (i == iNbProperties) return -1;
    return i;
}















} //	namespace
